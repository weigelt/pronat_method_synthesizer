

# binary classification (step 1) ################################################################################

# defines the tokenizer for the models, trained on whole vocab
VOCAB=models/tok_full_vocab_tokenized.json

# defines the model used for binary classification: with or without pretrained fasttext word vectors
# binary_RNN4_oWv_tok_fulldata.best.hdf5  OR  binary_RNN4_fasttextWv_tok_fulldata.best.hdf5
BIN_MODEL=models/binary_RNN4_fasttextWv_tok_fulldata.best.hdf5


# multiclass classification (step 2) ################################################################################

# defines the model used for multiclass classification: with or without pretrained fasttext word vectors
# mclass_RNN1_oWv_tok_full.best.hdf5  OR   mclass_RNN1_fasttextWv_tok_full.best.hdf5
MCLASS_MODEL=models/mclass_RNN1_oWv_tok_full.best.hdf5

# use prediction per DL4J (true) OR per python script (false)
USE_INTERAL_MCLASS_MODEL=false


# ontology mapper ####################################################################################################

# return topN function call candidates
TOP_N=5

# defines the stopwords and modal verbs to skip
STOP_WORDS=armar, learn, how, you, that, this, teach, thank, would, need, have, must, like, can, should, want, mean, next, means, then, show, do, now
# start greeting by, learn to, asked to, if i say to you, tell you??

# extra ohne IN (also prepositionen, birgt aber gefahr, dass turn on als VB IN statt VB RP erkannt wird)
PARAMETER_POS=CD, JJ, JJR, JJS, NN, NNS, NNP, NNPS, PDT, PP, PP$, RB, RB, RBR, RBS, RP

# use forms of "to be" as verb modifier, e.g. "is closed"
TO_BE_VERB_MODIFIER=true

# use permutations for searches, e.g. search for isClosed and closedIs
USE_PERMUTATIONS=true

# try to match unlemmatized content also (Note, lemmatized is still used)
MATCH_UNLEMMATIZED=true

# consider coverage or not, e.g "is closed" → isClosed, cov=1.0, → close, cov~=0.7
CONSIDER_COVERAGE=true

# coverage malus multiplier
COVERAGE_MULTIPLIER=0.5
